type LpError = enum {
  InsufficientAmount,
  InsufficientFormerAmount,
  InsufficientLatterAmount,
  InsufficientLiquidity,
  InvalidRecipient,
  ZeroActorId,
  TransferFailed,
  Overflow,
  DeadlineExceeded,
  IdenticalTokens,
  FeeToGettingFailed,
  InvalidTokens,
  InvalidRouter,
  CanNotConnectToVft,
  InsufficientLiquidityMinted,
  InsufficientLiquidityBurned,
  InsufficientOutputAmount,
  InsufficientInputAmount,
  KConstant,
  InvalidTo,
  CanNotConnectToFactory,
};

constructor {
  New : (factory: actor_id, token_a: actor_id, token_b: actor_id, name: str, symbol: str, decimals: u8);
};

service LpService {
  Burn : (to: actor_id) -> result (struct { u256, u256 }, LpError);
  Mint : (to: actor_id) -> result (u256, LpError);
  Skim : (to: actor_id) -> result (null, LpError);
  Swap : (amount0_out: u256, amount1_out: u256, to: actor_id) -> result (null, LpError);
  Sync : () -> result (null, LpError);
  Approve : (spender: actor_id, value: u256) -> bool;
  Transfer : (to: actor_id, value: u256) -> bool;
  TransferFrom : (from: actor_id, to: actor_id, value: u256) -> bool;
  query GetReserves : () -> struct { u256, u256, u64 };
  query Allowance : (owner: actor_id, spender: actor_id) -> u256;
  query BalanceOf : (account: actor_id) -> u256;
  query Decimals : () -> u8;
  query Name : () -> str;
  query Symbol : () -> str;
  query TotalSupply : () -> u256;

  events {
    Mint: struct { sender: actor_id, amount: struct { u256, u256 } };
    Burn: struct { sender: actor_id, amount: struct { u256, u256 }, to: actor_id };
    Swap: struct { sender: actor_id, amount_in: struct { u256, u256 }, amount_out: struct { u256, u256 }, to: actor_id };
    GetReserves: struct { reserve_a: u128, reserve_b: u128, block_timestamp_last: u64 };
    Sync: struct { reserve_a: u256, reserve_b: u256 };
    Skim: struct { amount_a: u256, amount_b: u256, to: actor_id };
    Approval: struct { owner: actor_id, spender: actor_id, value: u256 };
    Transfer: struct { from: actor_id, to: actor_id, value: u256 };
  }
};

